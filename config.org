#+title: Doom Config
#+date:<2025-05-14 Wed>

* Table of contents :TOC:
- [[#basic][Basic]]
  - [[#visuals][Visuals]]
  - [[#bookmarks][Bookmarks]]
  - [[#dired][Dired]]
  - [[#others][Others]]
- [[#org-mode][Org mode]]
  - [[#defaults][Defaults]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-latex-previews][Org Latex Previews]]
  - [[#org-roam][Org Roam]]

* Basic
** Visuals
*** Fonts
#+begin_src elisp
(setq
 doom-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 14 :weight 'regular)
 doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 24)
 doom-variable-pitch-font (font-spec :family "Sans Serif" :size 14)
 )
#+end_src
*** Theme
#+begin_src elisp
(setq!
 doom-theme 'doom-gruvbox
 )
#+end_src
*** Beacon cursor
#+begin_src elisp
(use-package! beacon
  :config
  (beacon-mode 1)
  )
#+end_src
*** Other visuals
#+begin_src elisp
(global-whitespace-mode -1)
(global-visual-line-mode t)
(+global-word-wrap-mode +1)

(setq
 display-line-numbers 'relative
 )
#+end_src
** Bookmarks
#+begin_src elisp
(setq
 bookmark-default-file "~/.config/doom/bookmarks"
 )
(map! :leader
      (:prefix ("b" . "buffer")
       :desc "List bookmarks"  "L" #'list-bookmarks
       :desc "Set bookmark"    "m" #'bookmark-set
       :desc "Delete bookmark" "M" #'bookmark-delete
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save
       )
      )
#+end_src
** Dired
#+begin_src elisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file"           "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)

(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src
** Others
*** autosave and backup
#+begin_src elisp
(setq
 auto-save-default t
 make-backup-files t
 )
#+end_src
*** exit confirm
#+begin_src elisp
(setq
 confirm-kill-emacs nil
 )
#+end_src
*** Global auto revert
A buffer can get out of sync with respect to its visited file on disk if that file changed by another program. To keep it up to date, you can set it to be turned on globally with 'global-auto-revert-mode'
#+begin_src elisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers 1)
#+end_src
* Org mode
** Defaults
#+begin_src elisp
(after! org
  (setq
   org-directory "~/org/"
   org-default-notes-file (expand-file-name "notes.org" org-directory)
        ; using org-pretty instead
        ;org-ellipsis " ▼ "
        ;org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        ;org-superstar-item-bullet-alist '((?+ . ?➤) (?- . ?✦))
   org-log-done 'time
   org-hide-emphasis-markers t
   org-startup-with-inline-images t
   org-edit-src-content-indentation 0
   org-startup-with-latex-preview t
   org-highlight-latex-and-related '(native script)
   )
  (setq
   org-todo-keywords
   '(
     (sequence "TODO(t)" "IN-PROGRESS(i)" "WAIT(w)" "HOLD(h)" "|" "DONE(d)" "CANCELED(c)")
     (sequence "[ ]" "[-]" "|" "[X]")
     )
   )
  (custom-set-faces!
    `((org-document-title)
      :foreground ,(face-attribute 'org-document-title :foreground)
      :height 1.3 :weight bold)
    `((org-level-1)
      :foreground ,(face-attribute 'outline-1 :foreground)
      :height 1.1 :weight medium)
    `((org-level-2)
      :foreground ,(face-attribute 'outline-2 :foreground)
      :weight medium)
    `((org-level-3)
      :foreground ,(face-attribute 'outline-3 :foreground)
      :weight medium)
    `((org-level-4)
      :foreground ,(face-attribute 'outline-4 :foreground)
      :weight medium)
    `((org-level-5)
      :foreground ,(face-attribute 'outline-5 :foreground)
      :weight medium)
    )
  )
#+end_src
** Org Agenda
#+begin_src elisp
(after! org
  (setq
   org-agenda-files (directory-files-recursively org-directory "\\.org$")
   org-agenda-start-day "+0d"
   org-agenda-skip-timestamp-if-done 1
   org-agenda-skip-deadline-if-done 1
   org-agenda-skip-scheduled-if-done 1
   )
  )
#+end_src
** Org Latex Previews
#+begin_src elisp
(after! org
  (dolist (pkg '("amsmath" "amssymb" "mathtools" "mathrsfs" "tikz" "pgfplots"))
    (add-to-list 'org-latex-packages-alist `("" ,pkg t))))

(use-package! org-latex-preview
  :after org
  :config
  (plist-put org-latex-preview-appearance-options
             :page-width 0.8)
  (add-hook 'org-mode-hook 'org-latex-preview-auto-mode)
  (setq org-latex-preview-auto-ignored-commands
        '(next-line previous-line mwheel-scroll ultra-scroll
          scroll-up-command scroll-down-command
          evil-scroll-up evil-scroll-down evil-scroll-line-up evil-scroll-line-down)
        org-latex-preview-numbered t
        org-latex-preview-live t
        org-latex-preview-live-debounce 0.25)
  )
#+end_src
** Org Roam
#+begin_src elisp
(use-package! org-roam
  :defer t
  :config
  (setq org-roam-directory (file-truename "~/org/Roam")
        org-roam-db-location (file-truename "~/org/Roam/org-roam.db")
        org-attach-id-dir "assets/"
        org-roam-completion-everywhere 1
        )
  (org-roam-db-autosync-enable)
  (setq org-roam-capture-templates '(
                                     ("d" "default" plain
                                      "\n%?"
                                      :if-new (file+head "default-${slug}.org" "#+title: ${title}\n#+date: %U\n\n")
                                      :unnarrowed t
                                      )
                                     ("p" "project" plain
                                      "\n* Goals\n%?\n\n* Tasks\n** TODO Add initial tasks\n\n* Dates\n"
                                      :if-new (file+head "Projects/project-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: project\n\n")
                                      :unnarrowed t
                                      )
                                     ("u" "CS" plain
                                      "\n%"
                                      :if-new (file+head "CS/uni-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: :uni:s25:\n#+startup: latexpreview\n\n")
                                      :unarrowed t
                                      )

                                     ("c" "media")
                                     ("cb" "book notes" plain
                                      "\n\n* Source\n- Author: %^{Author}\n- Title: ${title}\n- Year: %^{Year}\n- Reading start: %^{Reading start}\n- Reading end: %^{Reading end}\n\n* Summary\n%?"
                                      :if-new (file+head "Media/Books/book-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags:\n\n")
                                      :unnarrowed t
                                      )
                                     ("cp" "podcast" plain
                                      "\n\n* Source\n - Author: %^{Author}\n - Title: ${title}\n - Link: %^{Link}\n\n* Summary\n%?"
                                      :if-new (file+head "Media/Podcasts/podcast-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags:\n\n")
                                      :unarrowed t
                                      )
                                     ("cf" "film" plain
                                      "\n\n* Source\n - Link: %^{Link}\n - Title: ${title}\n\n* Summary\n%?"
                                      :if-new (file+head "Media/Films/film-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags:\n\n")
                                      :unarrowed t
                                      )
                                     ("ca" "article" plain
                                      "\n\n* Source\n - Link: %^{Link}\n - Title: ${title}\n\n* Summary\n%?"
                                      :if-new (file+head "Media/Articles/article-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags:\n\n")
                                      :unarrowed t
                                      )
                                     )
        )
  (map! :leader
        (:prefix ("n r" . "org-roam")
          :desc "Open Org-roam UI"    "u" #'org-roam-ui-open
          :desc "Add a tag to node"   "t" #'org-roam-tag-add
          :desc "Create a heading node" "h" #'org-id-get-create
          )
         )
  )

(use-package! websocket
  :after org-roam)
#+end_src
*** Org Roam UI
#+begin_src elisp
(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t
        org-roam-mode-sections
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section)
        org-latex-preview-appearance-options '(
                                               :foreground auto
                                               :background "Transparent"
                                               :scale 1.7
                                               :zoom 1.4
                                               :page-width 0.8
                                               :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")
                                               )
        )
  )
#+end_src
