#+title: doom emacs config
#+startup: showall

* Table of Contents :TOC:
- [[#appearance][Appearance]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#autostart][Autostart]]
  - [[#other-visuals][Other visuals]]
  - [[#beacon-cursor][Beacon cursor]]
- [[#bookmarks][Bookmarks]]
- [[#dired][Dired]]
- [[#latex][Latex]]
- [[#org][Org]]
  - [[#defaults][Defaults]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-pretty-pretty][Org Pretty (+pretty)]]
  - [[#org-download-dragndrop][Org Download (+dragndrop)]]
  - [[#org-roam][Org Roam]]
  - [[#org-roam-ui][Org Roam UI]]
  - [[#org-latex-previews][Org Latex Previews]]
- [[#pdf][PDF]]

* Appearance
** Fonts
#+begin_src elisp
(setq
 doom-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 14 :weight 'regular)
 doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 24)
 doom-variable-pitch-font (font-spec :family "Sans Serif" :size 14)
 )

#+end_src
** Theme
#+begin_src elisp
(setq
 doom-theme 'doom-gruvbox
 )
#+end_src
** Autostart
#+begin_src elisp
(setq
 gc-cons-threshold (* 50 1000 1000)
 )
(defun display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done)
  )

(add-hook 'emacs-startup-hook #'display-startup-time)
#+end_src
** Other visuals
#+begin_src elisp
(global-whitespace-mode -1)
(global-visual-line-mode 1)
(+global-word-wrap-mode 1)
(setq
 display-line-numbers 'relative
 )
#+end_src
** Beacon cursor
#+begin_src elisp
(use-package! beacon
  :config
  (beacon-mode 1)
 )
#+end_src
* Bookmarks
#+begin_src elisp
(setq bookmark-default-file "~/.config/doom/bookmarks") ;;default folder for bookmarks

(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks"                          "L" #'list-bookmarks
       :desc "Set bookmark"                            "m" #'bookmark-set
       :desc "Delete bookmark"                         "M" #'bookmark-set
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save)
      )
;;

;; A buffer can get out of sync with respect to its visited file on disk if that file is changed by another program. To keep it up to date, you can enable Auto Revert mode by typing M-x auto-revert-mode, or you can set it to be turned on globally with ‘global-auto-revert-mode’.  I have also turned on Global Auto Revert on non-file buffers, which is especially useful for ‘dired’ buffers.
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers 1)
#+end_src
* Dired
#+begin_src elisp

#+end_src
* Latex
Path to latex
#+begin_src elisp
(setenv "PATH" (concat "/usr/local/texlive/2024/bin/x86_64-linux:" (getenv "PATH")))
(add-to-list 'exec-path "/usr/local/texlive/2024/bin/x86_64-linux")
#+end_src

* Org
** Defaults
#+begin_src elisp
(after! org
  (setq
   org-directory "~/org/"
    org-default-notes-file (expand-file-name "notes.org" org-directory)
        ; using org-pretty instead
        ;org-ellipsis " ▼ "
        ;org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        ;org-superstar-item-bullet-alist '((?+ . ?➤) (?- . ?✦))
        org-log-done 'time
        org-hide-emphasis-markers t
   )
  (setq
   org-todo-keywords
   '(
     (sequence "TODO(t)" "IN-PROGRESS(i)" "WAIT(w)" "HOLD(h)" "|" "DONE(d)" "CANCELED(c)")
     (sequence "[ ]" "[-]" "|" "[X]")
     )
   )
  )
#+end_src
** Org Agenda
#+begin_src elisp
(after! org
  (setq
   org-agenda-files (directory-files-recursively org-directory "\\.org$")
   org-agenda-start-day "+0d"
   org-agenda-skip-timestamp-if-done 1
   org-agenda-skip-deadline-if-done 1
   org-agenda-skip-scheduled-if-done 1
   )
  )
#+end_src
** Org Pretty (+pretty)
#+begin_src elisp
(after! org
  (add-hook 'org-mode-hook #'+org-pretty-mode)
  )
#+end_src
** Org Download (+dragndrop)
#+begin_src elisp
(after! org
  (org-display-inline-images 1)
  )
#+end_src
** Org Roam
#+begin_src elisp
(after! org
  (setq
   org-roam-directory "~/org/Roam/"
   org-roam-db-location "~/org/Roam/org-roam.db"
   org-roam-completion-everywhere 1
   )

  (setq org-roam-capture-templates '(
        ("d" "default" plain
         "\n%?"
         :if-new (file+head "default-${slug}.org" "#+title: ${title}\n#+date: %U\n\n")
         :unnarrowed t
         )
        ("p" "project" plain
         "\n* Goals\n%?\n\n* Tasks\n** TODO Add initial tasks\n\n* Dates\n"
         :if-new (file+head "project-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: project\n\n")
         :unnarrowed t
         )
        ("u" "uni" plain
         "\n%"
         :if-new (file+head "RoamAGH/uni-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: :uni:s25:\n#+startup: latexpreview\n\n")
         :unarrowed t
         )

        ("c" "media")
        ("cb" "book notes" plain
         "\n* Source\n- Author: %^{Author}\n- Title: ${title}\n- Year: %^{Year}\n- Reading start: %^{Reading start}\n- Reading end: %^{Reading end}\n\n* Summary\n%?"
         :if-new (file+head "book-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: book\n\n")
         :unnarrowed t
         )
        ("cp" "podacst" plain
         "\n* Source\n - Author: %^{Author}\n - Title: ${title}\n - Link: %^{Link}\n\n* Summary\n%?"
         :if-new (file+head "podcast-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: podcast\n\n")
         :unarrowed t
         )
        ("cf" "film" plain
         "\n* Source\n - Link: %^{Link}\n - Title: ${title}\n\n* Summary\n%?"
         :if-new (file+head "film-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: film\n\n")
         :unarrowed t
         )
        ("ca" "article" plain
         "\n* Source\n - Link: %^{Link}\n - Title: ${title}\n\n* Summary\n%?"
         :if-new (file+head "article-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: article\n\n")
         :unarrowed t
         )
        )
        )
   (map! :leader
         (:prefix ("n r" . "org-roam")
          :desc "Open Org-roam UI"    "u" #'org-roam-ui-open
          :desc "Add a tag to node"   "t" #'org-roam-tag-add
          :desc "Create a heading node" "h" #'org-id-get-create
          )
         )
  )
#+end_src
** Org Roam UI
#+begin_src elisp
(use-package! org-roam-ui
    :after org ;; or :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq
     org-roam-db-autosync-mode 1
     org-roam-ui-sync-theme 1
     org-roam-ui-follow 1
     org-roam-ui-update-on-save 1
     org-roam-ui-open-on-start 1
     )
    )
#+end_src
** Org Latex Previews
#+begin_src elisp
(after! org
  (add-hook 'org-mode 'org-latex-preview-auto-mode)
  (setq
   ;org-startup-with-latex-preview t
   org-latex-preview-numbered t
   org-latex-preview-live t
   org-latex-preview-live-debounce 0.25
   org-latex-preview-auto-ignored-commands '(next-line previous-line mwhell-scroll scroll-up-command scroll-down-command)
   org-latex-preview-live-display-type 'buffer
   org-latex-preview-appearance-options '(
                                          :foreground auto
                                          :background "Transparent"
                                          :scale 1.6 :zoom 1.3
                                          :page-width 0.8
                                          :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")
                                          )
   ;org-latex-preview-preamble '(
                                ;"\\documentclass{article}\12\\usepackage[utf8]{inputenc}\12\\usepackage{geometry}\12\\usepackage{xcolor}"
   ;                             )
   )
    )
#+end_src
* PDF
Firstly "M-x package-install pdf-tools-install" -> epdfinfo
#+begin_src elisp
;(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
#+end_src
